{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Work Items Gantt Work Items Gantt brings the interactive high-level project planning scheduling to Polarion ALM. Interactive drag drop enabled Gantt chart widget provides unique capabilities to expose the standard Work Items (such as Features, Epics, Objectives, ...) as micro projects in a visually appealing way and perform various operations easily and efficiently. Adjust Schedule You can easily adjust the project schedule, including re-scheduling of the subtasks when the parent project schedule is adjusted: Manage Dependencies The Management of project and task dependencies is another common task. Just start a link on start item and finish it on target item: Storing Data You can fully configure what work item custom fields are used to store the Gantt information, See Widget Advanced Properties .","title":"Getting Started"},{"location":"#work-items-gantt","text":"Work Items Gantt brings the interactive high-level project planning scheduling to Polarion ALM. Interactive drag drop enabled Gantt chart widget provides unique capabilities to expose the standard Work Items (such as Features, Epics, Objectives, ...) as micro projects in a visually appealing way and perform various operations easily and efficiently.","title":"Work Items Gantt"},{"location":"#adjust-schedule","text":"You can easily adjust the project schedule, including re-scheduling of the subtasks when the parent project schedule is adjusted:","title":"Adjust Schedule"},{"location":"#manage-dependencies","text":"The Management of project and task dependencies is another common task. Just start a link on start item and finish it on target item:","title":"Manage Dependencies"},{"location":"#storing-data","text":"You can fully configure what work item custom fields are used to store the Gantt information, See Widget Advanced Properties .","title":"Storing Data"},{"location":"about/","text":"About The Work Items Gantt widget is developed by Nextedy Systems https://www.nextedy.com For information about licensing and pricing, please contact us at","title":"About"},{"location":"about/#about","text":"The Work Items Gantt widget is developed by Nextedy Systems https://www.nextedy.com For information about licensing and pricing, please contact us at","title":"About"},{"location":"changelog/","text":"Release Notes Changelog Info The latest plugin distribution is available here For those who read this documentation embedded in Polarion: you can check the online version for up-to-date changelog: https://nextedy.github.io/gantt-docs/changelog/ 1.0.2 _ May 28, 2019 Documentation improvements Script support added to decorate a task based on work item properties, see Widget Task Script Infinite loop on parent links (should not happen in Polarion) does not cause gantt to fail (but data do not load). Project style support (via Task Script) 1.0.1 _ May 15, 2019 Published on extensions.polarion.com New Work Items Gantt widget icon. Widget tags configured - \"Work Items\", \"Charts\" gantt.config.round_dnd_dates reflected when dragging children 1.0.0 _ May 5, 2019 After couple of months of development and use in several customer projects we officially release the public version 1.0.0. TODO Refresh - refresh action to reload the Gantt Drag children control - add an option to turn on/off drag children instantly on Gantt, the widget property would hold the default Today - add marker for today + scroll to today Readonly - add widget property to mark Gantt read-only Server Side Scripted Tooltip - add widget property - a script - to hold a generation of tooltip on the server side ... Partially possibly in 1.0.2 with Task Script Item Colors based on Type - make it possible to color the tasks based on item type. Partially possibly in 1.0.2 with Task Script Set Scale control - add an option to set the timeline scale instantly on Gantt, the widget property would hold the default. Known Issues When you collapse a left side Polarion navigator, the empty place appears on the right (collapse/drag fixes it) Infinite loop on parent links (should not happen in Polarion) not handled well.","title":"Release Notes"},{"location":"changelog/#release-notes","text":"","title":"Release Notes"},{"location":"changelog/#changelog","text":"Info The latest plugin distribution is available here For those who read this documentation embedded in Polarion: you can check the online version for up-to-date changelog: https://nextedy.github.io/gantt-docs/changelog/","title":"Changelog"},{"location":"changelog/#102-_-may-28-2019","text":"Documentation improvements Script support added to decorate a task based on work item properties, see Widget Task Script Infinite loop on parent links (should not happen in Polarion) does not cause gantt to fail (but data do not load). Project style support (via Task Script)","title":"1.0.2 _ May 28, 2019"},{"location":"changelog/#101-_-may-15-2019","text":"Published on extensions.polarion.com New Work Items Gantt widget icon. Widget tags configured - \"Work Items\", \"Charts\" gantt.config.round_dnd_dates reflected when dragging children","title":"1.0.1 _ May 15, 2019"},{"location":"changelog/#100-_-may-5-2019","text":"After couple of months of development and use in several customer projects we officially release the public version 1.0.0.","title":"1.0.0 _ May 5, 2019"},{"location":"changelog/#todo","text":"Refresh - refresh action to reload the Gantt Drag children control - add an option to turn on/off drag children instantly on Gantt, the widget property would hold the default Today - add marker for today + scroll to today Readonly - add widget property to mark Gantt read-only Server Side Scripted Tooltip - add widget property - a script - to hold a generation of tooltip on the server side ... Partially possibly in 1.0.2 with Task Script Item Colors based on Type - make it possible to color the tasks based on item type. Partially possibly in 1.0.2 with Task Script Set Scale control - add an option to set the timeline scale instantly on Gantt, the widget property would hold the default.","title":"TODO"},{"location":"changelog/#known-issues","text":"When you collapse a left side Polarion navigator, the empty place appears on the right (collapse/drag fixes it) Infinite loop on parent links (should not happen in Polarion) not handled well.","title":"Known Issues"},{"location":"setup/","text":"Setup Installation In this document, we describe how to configure Polarion to display the Work Item Gantt. We suppose the plugin is already installed. If you look for the plugin installation instructions you will find them in the distribution zip file. The latest distribution is available here Widget The Work Item Gantt is implemented as standard Polarion widget. All the configuration options are described on Widget Parameters page. Display Modes You have two options on how to display the Gantt widget. Setup Gantt as Full-Report view OR Add Gantt to an existing report Full Report Gantt The most common approach to show Work Items Gantt is to create a single LiveReport page, call it for example Gantt , and put the Work Items Gantt Widget as single widget there. In this case, we recommend to activate the following widget property: Advanced Maximize - set the Maximize property of the widget to 'yes' This will make the widget size equal to working area size. Please make sure there are no additional empty paragraphs or other whitespace content around the widget. Gantt as Widget Sometimes it is more useful to embed the Gantt widget to an existing report, together with other reporting widgets. In such case make sure that Maximize property is turned off. Advanced Maximize - set the Maximize property of the widget to 'no' Warning Currently, it is possible to have only one Work Item Gantt widget on a page. Please do not add more of them on a single page. Data Mapping Once you have the widget on your page, you need to configure where to store scheduling information. The Gantt model is storing the following data: Start Date (Date) Duration (Number of days) Progress (Float from 0 .. 1) You can configure the mapping using the Advanced Widget parameters: Start Field - the name of the custom field, that stores the information when the work item starts. The type of the custom field can be any of these: Date, Date-Time or String. If such custom field does not exist, the value will be stored in String ad-hoc custom field. For production use, we recommend using a Date (Only) custom field. Duration Field - the name of the custom field, that stores the information about the work item duration as the number of days. The type of the custom field can be any of these: Integer or String. If such custom field does not exist, the value will be stored in String ad-hoc custom field. For production use, we recommend using an Integer custom field. Progress Field - the name of the custom field, that stores the progress of the work item progress as Float (multiply by 100 to get % of completion). The type of the custom field can be any of these: Float or String. If such custom field does not exist, the value will be stored in String ad-hoc custom field. For production use, we recommend using a Float custom field. Hierarchy The hierarchy of items on the Gantt chart is derived from work item links. This is controlled by Parent Role widget parameter: Parent Role - select what Work Item link roles should be used to detect the parent-child relationships. If empty, no hierarchy is shown. Dependencies The dependency links are also derived from the work item links. This is controlled by Dependency Role widget parameter: Dependency Role - select what Work Item link roles should be used to detect Depends-on relationships. If empty, no dependencies will be shown. If you select multiple link roles, the first role is used when creating new links. If you do not want to let the user create dependency links, put following property to Advanced Additional Script parameter: gantt . config . drag_links = false ; Time Range By default the Gantt chart shows the time range as small as to fit the items. If you want to set the start and end date manually, for example to allow the dragging of the items to future, set following properties in Advanced Additional Script (both need to be set). gantt . config . start_date = new Date ( 2018 , 12 , 10 ); gantt . config . end_date = new Date ( 2020 , 08 , 20 ); More There are more configuration options available, see Widget Parameters page for the full list.","title":"Setup"},{"location":"setup/#setup","text":"Installation In this document, we describe how to configure Polarion to display the Work Item Gantt. We suppose the plugin is already installed. If you look for the plugin installation instructions you will find them in the distribution zip file. The latest distribution is available here","title":"Setup"},{"location":"setup/#widget","text":"The Work Item Gantt is implemented as standard Polarion widget. All the configuration options are described on Widget Parameters page.","title":"Widget"},{"location":"setup/#display-modes","text":"You have two options on how to display the Gantt widget. Setup Gantt as Full-Report view OR Add Gantt to an existing report","title":"Display Modes"},{"location":"setup/#full-report-gantt","text":"The most common approach to show Work Items Gantt is to create a single LiveReport page, call it for example Gantt , and put the Work Items Gantt Widget as single widget there. In this case, we recommend to activate the following widget property: Advanced Maximize - set the Maximize property of the widget to 'yes' This will make the widget size equal to working area size. Please make sure there are no additional empty paragraphs or other whitespace content around the widget.","title":"Full Report Gantt"},{"location":"setup/#gantt-as-widget","text":"Sometimes it is more useful to embed the Gantt widget to an existing report, together with other reporting widgets. In such case make sure that Maximize property is turned off. Advanced Maximize - set the Maximize property of the widget to 'no' Warning Currently, it is possible to have only one Work Item Gantt widget on a page. Please do not add more of them on a single page.","title":"Gantt as Widget"},{"location":"setup/#data-mapping","text":"Once you have the widget on your page, you need to configure where to store scheduling information. The Gantt model is storing the following data: Start Date (Date) Duration (Number of days) Progress (Float from 0 .. 1) You can configure the mapping using the Advanced Widget parameters: Start Field - the name of the custom field, that stores the information when the work item starts. The type of the custom field can be any of these: Date, Date-Time or String. If such custom field does not exist, the value will be stored in String ad-hoc custom field. For production use, we recommend using a Date (Only) custom field. Duration Field - the name of the custom field, that stores the information about the work item duration as the number of days. The type of the custom field can be any of these: Integer or String. If such custom field does not exist, the value will be stored in String ad-hoc custom field. For production use, we recommend using an Integer custom field. Progress Field - the name of the custom field, that stores the progress of the work item progress as Float (multiply by 100 to get % of completion). The type of the custom field can be any of these: Float or String. If such custom field does not exist, the value will be stored in String ad-hoc custom field. For production use, we recommend using a Float custom field.","title":"Data Mapping"},{"location":"setup/#hierarchy","text":"The hierarchy of items on the Gantt chart is derived from work item links. This is controlled by Parent Role widget parameter: Parent Role - select what Work Item link roles should be used to detect the parent-child relationships. If empty, no hierarchy is shown.","title":"Hierarchy"},{"location":"setup/#dependencies","text":"The dependency links are also derived from the work item links. This is controlled by Dependency Role widget parameter: Dependency Role - select what Work Item link roles should be used to detect Depends-on relationships. If empty, no dependencies will be shown. If you select multiple link roles, the first role is used when creating new links. If you do not want to let the user create dependency links, put following property to Advanced Additional Script parameter: gantt . config . drag_links = false ;","title":"Dependencies"},{"location":"setup/#time-range","text":"By default the Gantt chart shows the time range as small as to fit the items. If you want to set the start and end date manually, for example to allow the dragging of the items to future, set following properties in Advanced Additional Script (both need to be set). gantt . config . start_date = new Date ( 2018 , 12 , 10 ); gantt . config . end_date = new Date ( 2020 , 08 , 20 );","title":"Time Range"},{"location":"setup/#more","text":"There are more configuration options available, see Widget Parameters page for the full list.","title":"More"},{"location":"widget/","text":"Widget The Work Item Gantt widget is listed under Work Items tag: Info Currently, it is possible to have only one Work Item Gantt widget on a page. Widget Parameters Work Items - a standard data set parameter, select what work items you want to see on your Gantt chart. Parent Role - select what Work Item link roles should be used to detect the parent-child relationships. If empty, no hierarchy is shown. Dependency Role - select what Work Item link roles should be used to detect Depends-on relationships. If empty, no dependencies will be shown. If you select multiple link roles, the first role is used when creating new links. Load Children - define how many levels of child items should be traversed and added to the list in addition to the items from Work Items date set parameter. Zero (0) means that no additional items are shown. Show Unplanned - click on no to hide all the work items that do not have the Start Field set. If you keep it set to yes , such tasks will be in the list, scheduled for 'Today', and marked by gray color. Drag Children - configure if you want the child items to be rescheduled when dragging their parent's item. Advanced Parameters Maximize View - configure if the widget should expand its content over the full working area. See Setup . Start Field - the name of the custom field, that stores the information when the work item starts. The type of the custom field can be any of these: Date, Date-Time or String. If such custom field does not exist, the value will be stored in String ad-hoc custom field. For production use, we recommend using a Date (Only) custom field. Duration Field - the name of the custom field, that stores the information about the work item duration as the number of days. The type of the custom field can be any of these: Integer or String. If such custom field does not exist, the value will be stored in String ad-hoc custom field. For production use, we recommend using an Integer custom field. Progress Field - the name of the custom field, that stores the progress of the work item progress as Float (multiply by 100 to get % of completion). The type of the custom field can be any of these: Float or String. If such custom field does not exist, the value will be stored in String ad-hoc custom field. For production use, we recommend using a Float custom field. Sort by - the sort criteria to sort the top level work items. Scale ( D || W || M ) - configures the scale of the timeline. Values are: 'D' - day 'W' - week 'M' - Month Max Items - (Integer) limits the maximum number of work items loaded into the Gantt view. Gantt Config Script You can add additional Gantt javascript configuration options, e.g.: gantt . config . start_date = new Date ( 2018 , 12 , 10 ) ; gantt . config . end_date = new Date ( 2020 , 08 , 20 ) ; gantt . config . scale_unit = month ; gantt . config . step = 1 ; gantt . config . date_scale = %F, %Y ; gantt . config . min_column_width = 50 ; gantt . config . scale_height = 90 ; var weekScaleTemplate = function ( date ) { var dateToStr = gantt . date . date_to_str ( %d %M ) ; var endDate = gantt . date . add ( gantt . date . add ( date , 1 , week ) , - 1 , day ) ; return dateToStr ( date ) + - + dateToStr ( endDate ) ; } ; var daysStyle = function ( date ) { var dateToStr = gantt . date . date_to_str ( %D ) ; if ( dateToStr ( date ) == Sun || dateToStr ( date ) == Sat ) return weekend ; return ; } ; gantt . config . subscales = [ { unit : week , step : 1 , template : weekScaleTemplate }, { unit : day , step : 1 , date : %D , css : daysStyle } ] ; Task Script You can add a server side javascript (executed on server) to decorate the task based on the work item properties. You have two variables defined: task of type com.nextedy.polarion.gantt.model.Task wi of type com.polarion.alm.tracker.model.IWorkItem See following example, that changes type of the task to project if the Work Item Type in Polarion is capability . if ( wi . type . id === capability ) { task . color = green ; task . getFields () . put ( isCapability , true ) ; } else { task . getFields () . put ( isCapability , false ) ; } You can access a Task.class definition bellow. public class Task { public String id ; public String text ; public Date start_date ; public int duration = Integer . getInteger ( nextedy.gantt.default.task_duration , 10 ) ; public float progress ; public String parent ; public String type ; public String url ; public String itemId ; public String projectId ; public boolean readonly ; public boolean unplanned = false ; public boolean open = ! Boolean . getBoolean ( nextedy.gantt.default.do_expand ) ; public String color = System . getProperty ( nextedy.gantt.default.task_color , null ) ; private Map String , String fields = new HashMap String , String () ; public Map String , String getFields () { return fields ; } public void setFields ( Map String , String fields ) { this . fields = fields ; } } As you can see, you can store the additional information in fields map, and use it e.g. when configuring the actual tooltip in Gantt Config Script (experts only). gantt . templates . rightside_text = function ( start , end , task ) { return Capability: b + task . fields . isCapability + /b ; } ;","title":"Widget"},{"location":"widget/#widget","text":"The Work Item Gantt widget is listed under Work Items tag: Info Currently, it is possible to have only one Work Item Gantt widget on a page.","title":"Widget"},{"location":"widget/#widget-parameters","text":"Work Items - a standard data set parameter, select what work items you want to see on your Gantt chart. Parent Role - select what Work Item link roles should be used to detect the parent-child relationships. If empty, no hierarchy is shown. Dependency Role - select what Work Item link roles should be used to detect Depends-on relationships. If empty, no dependencies will be shown. If you select multiple link roles, the first role is used when creating new links. Load Children - define how many levels of child items should be traversed and added to the list in addition to the items from Work Items date set parameter. Zero (0) means that no additional items are shown. Show Unplanned - click on no to hide all the work items that do not have the Start Field set. If you keep it set to yes , such tasks will be in the list, scheduled for 'Today', and marked by gray color. Drag Children - configure if you want the child items to be rescheduled when dragging their parent's item.","title":"Widget Parameters"},{"location":"widget/#advanced-parameters","text":"Maximize View - configure if the widget should expand its content over the full working area. See Setup . Start Field - the name of the custom field, that stores the information when the work item starts. The type of the custom field can be any of these: Date, Date-Time or String. If such custom field does not exist, the value will be stored in String ad-hoc custom field. For production use, we recommend using a Date (Only) custom field. Duration Field - the name of the custom field, that stores the information about the work item duration as the number of days. The type of the custom field can be any of these: Integer or String. If such custom field does not exist, the value will be stored in String ad-hoc custom field. For production use, we recommend using an Integer custom field. Progress Field - the name of the custom field, that stores the progress of the work item progress as Float (multiply by 100 to get % of completion). The type of the custom field can be any of these: Float or String. If such custom field does not exist, the value will be stored in String ad-hoc custom field. For production use, we recommend using a Float custom field. Sort by - the sort criteria to sort the top level work items. Scale ( D || W || M ) - configures the scale of the timeline. Values are: 'D' - day 'W' - week 'M' - Month Max Items - (Integer) limits the maximum number of work items loaded into the Gantt view.","title":"Advanced Parameters"},{"location":"widget/#gantt-config-script","text":"You can add additional Gantt javascript configuration options, e.g.: gantt . config . start_date = new Date ( 2018 , 12 , 10 ) ; gantt . config . end_date = new Date ( 2020 , 08 , 20 ) ; gantt . config . scale_unit = month ; gantt . config . step = 1 ; gantt . config . date_scale = %F, %Y ; gantt . config . min_column_width = 50 ; gantt . config . scale_height = 90 ; var weekScaleTemplate = function ( date ) { var dateToStr = gantt . date . date_to_str ( %d %M ) ; var endDate = gantt . date . add ( gantt . date . add ( date , 1 , week ) , - 1 , day ) ; return dateToStr ( date ) + - + dateToStr ( endDate ) ; } ; var daysStyle = function ( date ) { var dateToStr = gantt . date . date_to_str ( %D ) ; if ( dateToStr ( date ) == Sun || dateToStr ( date ) == Sat ) return weekend ; return ; } ; gantt . config . subscales = [ { unit : week , step : 1 , template : weekScaleTemplate }, { unit : day , step : 1 , date : %D , css : daysStyle } ] ;","title":"Gantt Config Script"},{"location":"widget/#task-script","text":"You can add a server side javascript (executed on server) to decorate the task based on the work item properties. You have two variables defined: task of type com.nextedy.polarion.gantt.model.Task wi of type com.polarion.alm.tracker.model.IWorkItem See following example, that changes type of the task to project if the Work Item Type in Polarion is capability . if ( wi . type . id === capability ) { task . color = green ; task . getFields () . put ( isCapability , true ) ; } else { task . getFields () . put ( isCapability , false ) ; } You can access a Task.class definition bellow. public class Task { public String id ; public String text ; public Date start_date ; public int duration = Integer . getInteger ( nextedy.gantt.default.task_duration , 10 ) ; public float progress ; public String parent ; public String type ; public String url ; public String itemId ; public String projectId ; public boolean readonly ; public boolean unplanned = false ; public boolean open = ! Boolean . getBoolean ( nextedy.gantt.default.do_expand ) ; public String color = System . getProperty ( nextedy.gantt.default.task_color , null ) ; private Map String , String fields = new HashMap String , String () ; public Map String , String getFields () { return fields ; } public void setFields ( Map String , String fields ) { this . fields = fields ; } } As you can see, you can store the additional information in fields map, and use it e.g. when configuring the actual tooltip in Gantt Config Script (experts only). gantt . templates . rightside_text = function ( start , end , task ) { return Capability: b + task . fields . isCapability + /b ; } ;","title":"Task Script"}]}